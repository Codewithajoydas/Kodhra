<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>All Cards | Code Snippet Manager</title>
  <link rel="stylesheet" href="/style/css/partials/Header.css">
  <link rel="stylesheet" href="/style/css/ad_search.css">
  <link rel="stylesheet" href="/style/css/Notification.css">
  <link rel="stylesheet" href="/style/css/index.css">
  <link rel="stylesheet" href="/style/css/chip.css">
  <link rel="stylesheet" href="/style/css/card.css">
  <script src="/socket.io/socket.io.js"></script>
  <!-- External CDN for image color -->
  <script src="https://unpkg.com/colorthief/dist/color-thief.umd.js"></script>

</head>

<body data-theme="light">
  <div class="move_folder">
    <div class="header_title" style="font-weight: bolder">
      <div class="span">Move " folderName"</div>
    </div>
    <hr />
    <div class="folders_name">
      <ul>
        <% if (folders.length===0) { %>
          <span style="margin: 10px; color: red">No folder found</span>
          <% } %>
            <% folders.forEach((folder, i)=> { %>
              <li>
                <label>
                  <input type="radio" name="moveFolder" value="<%= folder._id %>" id="moveFolder<%= i %>" />
                  <div class="folder">
                    <div class="folder_icon">
                      <!-- SVG folder icon -->
                    </div>
                    <div class="folder_name" style="
                    display: flex;
                    justify-content: center;
                    align-items: center;
                    gap: 10px;
                  ">
                      <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#EDCE44"
                        stroke="none" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
                        class="lucide lucide-folder-icon lucide-folder">
                        <path
                          d="m6 14 1.5-2.9A2 2 0 0 1 9.24 10H20a2 2 0 0 1 1.94 2.5l-1.54 6a2 2 0 0 1-1.95 1.5H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h3.9a2 2 0 0 1 1.69.9l.81 1.2a2 2 0 0 0 1.67.9H18a2 2 0 0 1 2 2v2" />
                      </svg>
                      <span style="
                      display: block;
                      width: 120px;
                      white-space: nowrap;
                      overflow: hidden;
                      text-overflow: ellipsis;
                    " title="<%= folder.folderName %>">
                        <%= folder.folderName %>
                      </span>
                    </div>
                  </div>
                </label>
              </li>
              <% }) %>
      </ul>
      <button class="move_btn" onclick="moveIt()" <%=folders.length===0 ? "disabled" : "" %> > Move </button>
    </div>
  </div>

  <div class="content">
    <%- include("partials/header")%>
      <div class="toast" data-type="success">
        <div class="toast-content">
          <span class="toast-message"> </span>
          <div class="close">
            <svg xmlns="http://www.w3.org/2000/svg" width="15" height="15" viewBox="0 0 24 24" fill="none"
              stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
              class="lucide lucide-octagon-x-icon lucide-octagon-x">
              <path d="m15 9-6 6" />
              <path
                d="M2.586 16.726A2 2 0 0 1 2 15.312V8.688a2 2 0 0 1 .586-1.414l4.688-4.688A2 2 0 0 1 8.688 2h6.624a2 2 0 0 1 1.414.586l4.688 4.688A2 2 0 0 1 22 8.688v6.624a2 2 0 0 1-.586 1.414l-4.688 4.688a2 2 0 0 1-1.414.586H8.688a2 2 0 0 1-1.414-.586z" />
              <path d="m9 9 6 6" />
            </svg>
          </div>
        </div>
      </div>
      <div class="container">
        <%- include("partials/sidebar", { navigation: 'card' }) %>
          <main>
            <div class="card-container">
              <div class="all-cards">
                <span class="page_title">Browse by Tags</span>
                <div class="chips">
                  <div class="chip active"><span>All</span></div>
                  <div class="chip"><span>Pinned</span></div>
                  <div class="chip"><span>Favourites</span></div>
                  <div class="chip"><span>Javascript</span></div>
                  <div class="chip"><span>Python</span></div>
                  <div class="chip"><span>Java</span></div>
                  <div class="chip"><span>HTML</span></div>
                  <div class="chip"><span>CSS</span></div>
                  <div class="chip"><span>PHP</span></div>
                  <div class="chip"><span>SQL</span></div>
                  <div class="chip"><span>React</span></div>
                  <div class="chip"><span>Angular</span></div>
                  <div class="chip"><span>Vue</span></div>
                  <div class="chip"><span>Node</span></div>
                  <div class="chip"><span>Express</span></div>
                  <div class="chip"><span>MySQL</span></div>
                  <div class="chip"><span>Mongo DB</span></div>
                  <div class="chip"><span>New</span></div>
                  <div class="chip"><span>Updated</span></div>
                  <div class="chip"><span>Popular</span></div>


                </div>
                <div class="cardContainer-header">
                  <span class="page_title">All Snippets Created by You</span>
                  <div class="card-options disabled">
                    <div class="cardLen">125</div>
                    <div class="selectAll" onclick="selectAllButton()"><svg xmlns="http://www.w3.org/2000/svg"
                        width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
                        stroke-linecap="round" stroke-linejoin="round"
                        class="lucide lucide-grid2x2-check-icon lucide-grid-2x2-check">
                        <path
                          d="M12 3v17a1 1 0 0 1-1 1H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2v6a1 1 0 0 1-1 1H3" />
                        <path d="m16 19 2 2 4-4" />
                      </svg></div>
                    <div class="deleteAll" onclick="deleteCards()"><svg xmlns="http://www.w3.org/2000/svg" width="24"
                        height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
                        stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-trash-icon lucide-trash">
                        <path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6" />
                        <path d="M3 6h18" />
                        <path d="M8 6V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2" />
                      </svg></div>

                    <div class="download" onclick="downloadCard()"><svg xmlns="http://www.w3.org/2000/svg" width="24"
                        height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
                        stroke-linecap="round" stroke-linejoin="round"
                        class="lucide lucide-arrow-big-down-dash-icon lucide-arrow-big-down-dash">
                        <path
                          d="M15 11a1 1 0 0 0 1 1h2.939a1 1 0 0 1 .75 1.811l-6.835 6.836a1.207 1.207 0 0 1-1.707 0L4.31 13.81a1 1 0 0 1 .75-1.811H8a1 1 0 0 0 1-1V9a1 1 0 0 1 1-1h4a1 1 0 0 1 1 1z" />
                        <path d="M9 4h6" />
                      </svg></div>
                  </div>
                </div>
                <div id="cards">
                  <%- include("partials/cards") %>
                </div>
              </div>
              <div id="sentinelLoader"
                style=" text-align: center; width: 100%; display: flex; justify-content: center; align-items: center;">
                <img src="https://cdn.pixabay.com/animation/2024/04/02/07/57/07-57-40-974_512.gif" alt="Loading..."
                  style="width: 10%;">
              </div>
            </div>
            <%- include("partials/fab")%>
              <div id="context_menu" style="
                      position: absolute;
                      top: 0;
                      left: 0;
                      display: none;
                      z-index: 1000000;
                      width: 200px;
                    ">
                <ul id="context_menu_list"></ul>
              </div>
          </main>
      </div>
  </div>

  <script src="/scripts/ad_search.js"></script>
  <script src="/scripts/Fab.js"></script>
  <script src="/scripts/Notification.js"></script>
  <script src="/scripts/searchFunction.js"></script>
  <script src="/scripts/context_menu.js"></script>

  <script>

    const cardsContainer = document.getElementById("cards");
    const sentinelA = document.getElementById("sentinelLoader");

    let currentPage = 1;

    const observerA = new IntersectionObserver(async (entries) => {
      for (let entry of entries) {
        if (entry.isIntersecting) {
          currentPage++;
          const res = await fetch(`/card/json?page=${currentPage}`);
          if (res.ok) {
            const html = await res.text();
            if (html.trim()) {
              cardsContainer.insertAdjacentHTML("beforeend", html);
            } else {
              observerA.unobserve(sentinelA);
            }
          }
        }
      }
    }, {
      threshold: 0
    });

    observerA.observe(sentinelA);

  </script>
  <script>
    const container = document.querySelector('.chips');

    container.addEventListener('wheel', function (e) {
      e.preventDefault();
      container.scrollBy({
        left: e.deltaY,
        behavior: "smooth"
      });
    });


    let isDragging = false;
    let startX;
    let scrollStart;

    container.addEventListener('mousedown', (e) => {
      isDragging = true;
      startX = e.pageX;
      scrollStart = container.scrollLeft;
    });

    container.addEventListener('mouseup', () => {
      isDragging = false;
    });

    container.addEventListener('mouseleave', () => {
      isDragging = false;
    });

    container.addEventListener('mousemove', (e) => {
      if (!isDragging) return;
      let moveX = e.pageX - startX;
      container.scrollLeft = scrollStart - moveX;
    });


  </script>
  <script src="/scripts/chip.js"></script>
  <script src="/scripts/header.js"></script>

  <script>
    function contextMenu() {
      let context_menu = document.getElementById("context_menu");
      let menuListEl = document.getElementById("context_menu_list");

      document.querySelectorAll(".menu_top").forEach((card) => {
        card.addEventListener("click", (e) => {
          e.stopPropagation();
          const icons = {
            delete: `<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-trash-icon lucide-trash"><path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6"/><path d="M3 6h18"/><path d="M8 6V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"/></svg>`,
            edit: `<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-folder-pen-icon lucide-folder-pen"><path d="M2 11.5V5a2 2 0 0 1 2-2h3.9c.7 0 1.3.3 1.7.9l.8 1.2c.4.6 1 .9 1.7.9H20a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2h-9.5"/><path d="M11.378 13.626a1 1 0 1 0-3.004-3.004l-5.01 5.012a2 2 0 0 0-.506.854l-.837 2.87a.5.5 0 0 0 .62.62l2.87-.837a2 2 0 0 0 .854-.506z"/></svg>`,
            move: `<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-move-icon lucide-move"><path d="M12 2v20"/><path d="m15 19-3 3-3-3"/><path d="m19 9 3 3-3 3"/><path d="M2 12h20"/><path d="m5 9-3 3 3 3"/><path d="m9 5 3-3 3 3"/></svg>`,
            share: `<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-external-link-icon lucide-external-link"><path d="M15 3h6v6"/><path d="M10 14 21 3"/><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6"/></svg>`,
            pin: `<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-pin-icon lucide-pin"><path d="M12 17v5"/><path d="M9 10.76a2 2 0 0 1-1.11 1.79l-1.78.9A2 2 0 0 0 5 15.24V16a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1v-.76a2 2 0 0 0-1.11-1.79l-1.78-.9A2 2 0 0 1 15 10.76V7a1 1 0 0 1 1-1 2 2 0 0 0 0-4H8a2 2 0 0 0 0 4 1 1 0 0 1 1 1z"/></svg>`,
          };

          let { id, menuId, menus, userid, cardname, mtype } =
            e.currentTarget.dataset;
          console.log(mtype);
          const actions = {
            edit: () => editCard(id),
            share: () => shareCard(userid, id),
            pin: () => pinIt(id),
            move: () => moveCard(id, cardname, mtype),
            fav: () => favIt(id),
            delete: () => deleteCard(id),
          };
          let menuItems = menus.split(",").map((i) => i.trim());
          context_menu.style.display = "block";
          context_menu.style.visibility = "hidden";
          context_menu.style.left = "0px";
          context_menu.style.top = "0px";

          let menuWidth = context_menu.offsetWidth;
          let menuHeight = context_menu.offsetHeight;

          let x = e.clientX;
          let y = e.clientY;

          if (x + menuWidth > window.innerWidth)
            x = window.innerWidth - menuWidth - 10;
          if (y + menuHeight > window.innerHeight)
            y = window.innerHeight - menuHeight - 10;

          document.querySelector("body").classList.add("active");
          context_menu.style.left = x + "px";
          context_menu.style.top = y + "px";
          context_menu.style.visibility = "visible";
          context_menu.style.display = "block";

          menuListEl.innerHTML = "";

          menuItems.forEach((item) => {
            let li = document.createElement("li");
            li.innerHTML = `${icons[item]} ${item}`;
            menuListEl.appendChild(li);
            if (actions[item]) {
              li.addEventListener("click", (ev) => {
                ev.stopPropagation();
                actions[item]();
                context_menu.style.display = "none";
              });
            }
          });
        });
      });

      let move_folder = document.querySelector(".move_folder");
      let getFoldername = document.querySelector(".header_title .span");
      let folderId;
      let cardId;
      let movetype;
      let folder = document
        .querySelectorAll("input[name='moveFolder']")
        .forEach((fl) => {
          fl.addEventListener("change", (e) => {
            folderId = e.target.value;
          });
        });

      async function moveCard(id, cardName, mtype) {
        cardId = id;
        movetype = mtype;
        getFoldername.textContent = `Move \"${cardName}\" :`;
        move_folder.style.display = "block";
        move_folder.style.visibility = "visible";
      }



      async function moveIt() {
        const selected = document.querySelector(
          "input[name='moveFolder']:checked"
        );
        if (!selected) {
          showToast("⚠️ Please select a folder before moving.", "error");
          return;
        }

        const folderId = selected.value;

        try {
          const res = await fetch(`moveit/${movetype}/${folderId}/${cardId}`, {
            method: "PUT",
            headers: { "Content-Type": "application/json" },
            credentials: "include",
          });

          if (!res.ok) {
            let errorMsg = "Move failed. Please try again.";
            try {
              const data = await res.json();
              if (data?.error) errorMsg = data.error;
            } catch { }
            showToast(`🚨 ${errorMsg}`, "error");
          } else {
            showToast(`🎉 Successfully moved ${movetype}!`, "success");
          }
        } catch (err) {
          console.error("Error in moveIt:", err);
          showToast(
            "🚨 Unexpected error. Please check your connection.",
            "error"
          );
        }
      }

      document.addEventListener("click", () => {
        document.querySelector("body").classList.remove("active");
        context_menu.style.display = "none";

      });

    }
  </script>
  <script>
  </script>

  <script>
    const containera = document.querySelector("#cards");
    let selectedCardsSet = new Set();

    containera.addEventListener("change", () => {
      updateSelectedCards();
      contextMenu();
    });

  const onDocumentChange = (mutationsList, observer) => {
    for (const mutation of mutationsList) {
      if (mutation.type === 'childList') {
        contextMenu()
      } else if (mutation.type === 'attributes') {
      }
    }
  };

  const config = {
    attributes: true, 
    childList: true, 
    subtree: true    
  };

  const observers = new MutationObserver(onDocumentChange);

  if (containera) {
    observers.observe(containera, config);
  }




    function updateSelectedCards() {

      const selectedcards = document.querySelectorAll(".select-card");
      selectedcards.forEach(e => {
        const id = e.closest("[data-id]").dataset.id;
        if (e.checked) {
          selectedCardsSet.add(id);
        } else {
          selectedCardsSet.delete(id);
        }
      });
      let cardlen = document.querySelector(".cardLen");
      cardlen.textContent = [...selectedCardsSet].length
      if ([...selectedCardsSet].length > 0) {
        document.querySelector(".card-options").classList.remove("disabled");
      } else {
        document.querySelector(".card-options").classList.add("disabled");
      }
    }
    updateSelectedCards();
    contextMenu()


    function selectAllButton() {
      const selectedcards = document.querySelectorAll(".select-card");
      const shouldSelect = !Array.from(selectedcards).every(cb => cb.checked);

      selectedcards.forEach(cb => cb.checked = shouldSelect);
      updateSelectedCards();
    }

    async function deleteCards() {
      const res = await fetch("/card/delete", {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          selected: [...selectedCardsSet]
        })
      });
      if (res.ok) {
        location.reload();
      }
    }

    async function downloadCard() {
      try {
        const res = await fetch("/card/download", {
          method: "POST",
          headers: {
            "Content-Type": "application/json"
          },
          body: JSON.stringify({
            selected: [...selectedCardsSet]
          })
        });
        if (res.ok) {
          let data = await res.json();
          const blob = new Blob([JSON.stringify({ ...data })], { type: "application/json" });
          const url = URL.createObjectURL(blob);
          const a = document.createElement("a");
          a.href = url;
          const date = new Date().toLocaleDateString();
          const time = new Date().toLocaleTimeString();
          a.download = `Snippets-${date}-${time}.json`;
          a.click();
          URL.revokeObjectURL(url);
        } else {
          console.error("Somthing went wrong...")
        }
      } catch (error) {
        console.error(error.message);
      }
    }





  </script>

<script>
  const mf = document.querySelector(".move_folder");
  let isDragginga = false;
  let offsetX, offsetY;
  mf.addEventListener("mousedown", (e) => {
    e.preventDefault();
    isDragginga = true;
    offsetX = e.clientX - mf.offsetLeft;
    offsetY = e.clientY - mf.offsetTop;
    mf.style.position = "absolute";
    mf.style.zIndex = 1000;
  });
  document.addEventListener("mousemove", (e) => {
    if (!isDragginga) return;
    mf.style.left = e.clientX - offsetX + "px";
    mf.style.top = e.clientY - offsetY + "px";
  });
  document.addEventListener("mouseup", () => {
    isDragginga = false;
  });
</script>
<script>
  let context_menu = document.getElementById("context_menu");
  let menuListEl = document.getElementById("context_menu_list");

  document.querySelectorAll(".menu_top").forEach((card) => {
    card.addEventListener("click", (e) => {
      e.stopPropagation();
      const icons = {
        delete: `<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-trash-icon lucide-trash"><path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6"/><path d="M3 6h18"/><path d="M8 6V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"/></svg>`,
        edit: `<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-folder-pen-icon lucide-folder-pen"><path d="M2 11.5V5a2 2 0 0 1 2-2h3.9c.7 0 1.3.3 1.7.9l.8 1.2c.4.6 1 .9 1.7.9H20a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2h-9.5"/><path d="M11.378 13.626a1 1 0 1 0-3.004-3.004l-5.01 5.012a2 2 0 0 0-.506.854l-.837 2.87a.5.5 0 0 0 .62.62l2.87-.837a2 2 0 0 0 .854-.506z"/></svg>`,
        move: `<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-move-icon lucide-move"><path d="M12 2v20"/><path d="m15 19-3 3-3-3"/><path d="m19 9 3 3-3 3"/><path d="M2 12h20"/><path d="m5 9-3 3 3 3"/><path d="m9 5 3-3 3 3"/></svg>`,
        share: `<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-external-link-icon lucide-external-link"><path d="M15 3h6v6"/><path d="M10 14 21 3"/><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6"/></svg>`,
        pin: `<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-pin-icon lucide-pin"><path d="M12 17v5"/><path d="M9 10.76a2 2 0 0 1-1.11 1.79l-1.78.9A2 2 0 0 0 5 15.24V16a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1v-.76a2 2 0 0 0-1.11-1.79l-1.78-.9A2 2 0 0 1 15 10.76V7a1 1 0 0 1 1-1 2 2 0 0 0 0-4H8a2 2 0 0 0 0 4 1 1 0 0 1 1 1z"/></svg>`,
      };

      let { id, menuId, menus, userid, cardname, mtype } =
        e.currentTarget.dataset;
      console.log(mtype);
      const actions = {
        edit: () => editCard(id),
        share: () => shareCard(userid, id),
        pin: () => pinIt(id),
        move: () => moveCard(id, cardname, mtype),
        fav: () => favIt(id),
        delete: () => deleteCard(id),
      };
      let menuItems = menus.split(",").map((i) => i.trim());
      context_menu.style.display = "block";
      context_menu.style.visibility = "hidden";
      context_menu.style.left = "0px";
      context_menu.style.top = "0px";

      let menuWidth = context_menu.offsetWidth;
      let menuHeight = context_menu.offsetHeight;

      let x = e.clientX;
      let y = e.clientY;

      if (x + menuWidth > window.innerWidth)
        x = window.innerWidth - menuWidth - 10;
      if (y + menuHeight > window.innerHeight)
        y = window.innerHeight - menuHeight - 10;

      document.querySelector("body").classList.add("active");
      context_menu.style.left = x + "px";
      context_menu.style.top = y + "px";
      context_menu.style.visibility = "visible";
      context_menu.style.display = "block";

      menuListEl.innerHTML = "";

      menuItems.forEach((item) => {
        let li = document.createElement("li");
        li.innerHTML = `${icons[item]} ${item}`;
        menuListEl.appendChild(li);
        if (actions[item]) {
          li.addEventListener("click", (ev) => {
            ev.stopPropagation();
            actions[item]();
            context_menu.style.display = "none";
          });
        }
      });
    });
  });

  let move_folder = document.querySelector(".move_folder");
  let getFoldername = document.querySelector(".header_title .span");
  let folderId;
  let cardId;
  let movetype;
  let folder = document
    .querySelectorAll("input[name='moveFolder']")
    .forEach((fl) => {
      fl.addEventListener("change", (e) => {
        folderId = e.target.value;
      });
    });
    async function deleteCard(id) {
      const res = await fetch(`/card/${id}`, {
        method:"delete"});
      if (res.ok) {
        showToast("Card Deleted Successfully", "success");
        location.reload();
      } else {
        showToast("🚨 Unexpected error. Please check your connection.", "error");
      }
    }
  async function moveCard(id, cardName, mtype) {
    cardId = id;
    movetype = mtype;
    getFoldername.textContent = `Move \"${cardName}\" :`;
    move_folder.style.display = "block";
    move_folder.style.visibility = "visible";
  }

  const toast = document.querySelector(".toast");
  const toastCloseBtn = document.querySelector(".toast .close");
  const toastMessage = document.querySelector(".toast-message");

  let toastTimeoutId = null;

  function showToast(message, type = "success", duration = 5000) {
    if (toastTimeoutId) clearTimeout(toastTimeoutId);
    toastMessage.textContent = message;
    toast.dataset.type = type;
    toast.style.display = "block";
    toastTimeoutId = setTimeout(() => {
      toast.style.display = "none";
      toastTimeoutId = null;
    }, duration);
  }
  toastCloseBtn.addEventListener("click", () => {
    toast.style.display = "none";
    if (toastTimeoutId) {
      clearTimeout(toastTimeoutId);
      toastTimeoutId = null;
    }
  });

  async function moveIt() {
    const selected = document.querySelector(
      "input[name='moveFolder']:checked"
    );
    if (!selected) {
      showToast("⚠️ Please select a folder before moving.", "error");
      return;
    }

    const folderId = selected.value;

    try {
      const res = await fetch(`moveit/${movetype}/${folderId}/${cardId}`, {
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        credentials: "include",
      });

      if (!res.ok) {
        let errorMsg = "Move failed. Please try again.";
        try {
          const data = await res.json();
          if (data?.error) errorMsg = data.error;
        } catch { }
        showToast(`🚨 ${errorMsg}`, "error");
      } else {
        showToast(`🎉 Successfully moved ${movetype}!`, "success");
      }
    } catch (err) {
      console.error("Error in moveIt:", err);
      showToast(
        "🚨 Unexpected error. Please check your connection.",
        "error"
      );
    }
  }

  document.addEventListener("click", () => {
    document.querySelector("body").classList.remove("active");
    move_folder.style.display = "none";
    context_menu.style.display = "none";
    move_folder.querySelectorAll("input").forEach((inp) => {
      if (inp.type === "radio" || inp.type === "checkbox") {
        inp.checked = false;
        folderId = null;
      } else {
        inp.value = "";
      }
    });
  });
  move_folder.addEventListener("click", (e) => {
    e.stopPropagation();
  });


</script>
</body>

</html>