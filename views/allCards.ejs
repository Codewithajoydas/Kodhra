<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>All Cards | Code Snippet Manager</title>
  <link rel="stylesheet" href="/style/css/partials/Header.css">
  <link rel="stylesheet" href="/style/css/ad_search.css">
  <link rel="stylesheet" href="/style/css/Notification.css">
  <link rel="stylesheet" href="/style/css/index.css">
  <link rel="stylesheet" href="/style/css/chip.css">
  <link rel="stylesheet" href="/style/css/card.css">
  <link rel="stylesheet" href="/style/css/toast.css">
  <script src="https://unpkg.com/@lottiefiles/dotlottie-wc@0.6.2/dist/dotlottie-wc.js" type="module"></script>
  <link rel="preload" href="/gEzG0w1WVY.lottie" as="fetch" crossorigin="anonymous" />
  <script src="/socket.io/socket.io.js"></script>
  <!-- External CDN for image color -->
  <script src="https://unpkg.com/colorthief/dist/color-thief.umd.js"></script>
<style>
  .loader {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
    width: 100%;
    position: fixed;
    z-index: 100000;
    top: 0;
    font-size: clamp(30px, 3vw, 40px);

    font-weight: bolder;
  }

  .spain {
    width: 0.5em;
    height: 0.5em;
    background: #000000;
    border-radius: 50%;
    margin: 5px;
    animation: spin 0.6s ease-in-out infinite;
  }

  .spain:nth-child(1) {
    animation-delay: 0.1s;
  }

  .spain:nth-child(2) {
    animation-delay: 0.2s;
  }

  .spain:nth-child(3) {
    animation-delay: 0.3s;
  }

  @keyframes spin {
    0% {
      transform: translateY(0);
    }

    50% {
      transform: translateY(-10px);
    }

    100% {
      transform: translateY(0);
    }
  }
</style>
</head>

<body data-theme="light">
  <div class="loader">
    <dotlottie-wc src="gEzG0w1WVY.lottie" style="width: 400px; height: 400px" speed="1" autoplay loop></dotlottie-wc>
  </div>

  <div class="move_folder">
    <div class="header_title" style="font-weight: bolder">
      <div class="span">Move " folderName"</div>
    </div>
    <hr />
    <div class="folders_name">
      <ul>
        <% if (folders.length===0) { %>
          <span style="margin: 10px; color: red">No folder found</span>
          <% } %>
            <% folders.forEach((folder, i)=> { %>
              <li>
                <label>
                  <input type="radio" name="moveFolder" value="<%= folder._id %>" id="moveFolder<%= i %>" />
                  <div class="folder">
                    <div class="folder_icon">
                      <!-- SVG folder icon -->
                    </div>
                    <div class="folder_name" style="
                    display: flex;
                    justify-content: center;
                    align-items: center;
                    gap: 10px;
                  ">
                      <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#EDCE44"
                        stroke="none" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
                        class="lucide lucide-folder-icon lucide-folder">
                        <path
                          d="m6 14 1.5-2.9A2 2 0 0 1 9.24 10H20a2 2 0 0 1 1.94 2.5l-1.54 6a2 2 0 0 1-1.95 1.5H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h3.9a2 2 0 0 1 1.69.9l.81 1.2a2 2 0 0 0 1.67.9H18a2 2 0 0 1 2 2v2" />
                      </svg>
                      <span style="
                      display: block;
                      width: 120px;
                      white-space: nowrap;
                      overflow: hidden;
                      text-overflow: ellipsis;
                    " title="<%= folder.folderName %>">
                        <%= folder.folderName %>
                      </span>
                    </div>
                  </div>
                </label>
              </li>
              <% }) %>
      </ul>
      <button class="move_btn" onclick="moveIt()" <%=folders.length===0 ? "disabled" : "" %> > Move </button>
    </div>
  </div>

  <div class="content">
    <%- include("partials/header")%>
      <div class="toast" data-type="success">
        <div class="toast-content">
          <span class="toast-message"> </span>
          <div class="close">
            <svg xmlns="http://www.w3.org/2000/svg" width="15" height="15" viewBox="0 0 24 24" fill="none"
              stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
              class="lucide lucide-octagon-x-icon lucide-octagon-x">
              <path d="m15 9-6 6" />
              <path
                d="M2.586 16.726A2 2 0 0 1 2 15.312V8.688a2 2 0 0 1 .586-1.414l4.688-4.688A2 2 0 0 1 8.688 2h6.624a2 2 0 0 1 1.414.586l4.688 4.688A2 2 0 0 1 22 8.688v6.624a2 2 0 0 1-.586 1.414l-4.688 4.688a2 2 0 0 1-1.414.586H8.688a2 2 0 0 1-1.414-.586z" />
              <path d="m9 9 6 6" />
            </svg>
          </div>
        </div>
      </div>
      <div class="container">
        <%- include("partials/sidebar", { navigation: 'card' }) %>
          <main style="height: calc(100vh - 70px);">
            <div class="card-container" style="margin-bottom: 50px;">
              <div class="all-cards">
                <span class="page_title">Browse by Tags</span>
                <div class="chips">
                  <div class="chip active"><span>All</span></div>
                  <% tags.forEach((tag, i)=> { %>
                    <div class="chip"><span style="text-transform: capitalize;">
                        <%= tag %>
                      </span></div>
                    <% }) %>


                </div>
                <div class="cardContainer-header">
                  <span class="page_title">All Snippets Created by You</span>
                  <div class="card-options disabled">
                    <div class="cardLen">125</div>
                    <div class="selectAll" onclick="selectAllButton()"><svg xmlns="http://www.w3.org/2000/svg"
                        width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
                        stroke-linecap="round" stroke-linejoin="round"
                        class="lucide lucide-grid2x2-check-icon lucide-grid-2x2-check">
                        <path
                          d="M12 3v17a1 1 0 0 1-1 1H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2v6a1 1 0 0 1-1 1H3" />
                        <path d="m16 19 2 2 4-4" />
                      </svg></div>
                    <div class="deleteAll" onclick="deleteCards()"><svg xmlns="http://www.w3.org/2000/svg" width="24"
                        height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
                        stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-trash-icon lucide-trash">
                        <path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6" />
                        <path d="M3 6h18" />
                        <path d="M8 6V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2" />
                      </svg></div>

                    <div class="download" onclick="downloadCard()"><svg xmlns="http://www.w3.org/2000/svg" width="24"
                        height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
                        stroke-linecap="round" stroke-linejoin="round"
                        class="lucide lucide-arrow-big-down-dash-icon lucide-arrow-big-down-dash">
                        <path
                          d="M15 11a1 1 0 0 0 1 1h2.939a1 1 0 0 1 .75 1.811l-6.835 6.836a1.207 1.207 0 0 1-1.707 0L4.31 13.81a1 1 0 0 1 .75-1.811H8a1 1 0 0 0 1-1V9a1 1 0 0 1 1-1h4a1 1 0 0 1 1 1z" />
                        <path d="M9 4h6" />
                      </svg></div>
                  </div>
                </div>
                <div id="cards" style="overflow-y: scroll !important;">
                  <%- include("partials/cards") %>
                </div>
              </div>
              <div id="sentinelLoader"
                style=" text-align: center; width: 100%; display: flex; justify-content: center; align-items: center; padding-block: 20px;">
                <img src="https://cdn.pixabay.com/animation/2024/04/02/07/57/07-57-40-974_512.gif" alt="Loading..."
                  style="width: 10%;">
              </div>
            </div>
            <!-- <%- include("partials/fab")%> -->
            <div id="context_menu" style="
                      position: absolute;
                      top: 0;
                      left: 0;
                      display: none;
                      z-index: 1000000;
                      width: 200px;
                    ">
              <ul id="context_menu_list"></ul>
            </div>


            <div class="networkInfo" style="display: none;">
              <span><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none"
                  stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
                  class="lucide lucide-info-icon lucide-info">
                  <circle cx="12" cy="12" r="10" />
                  <path d="M12 16v-4" />
                  <path d="M12 8h.01" />
                </svg></span>

              <span id="networkInfo"></span>
            </div>
          </main>
      </div>
  </div>

  <script src="/scripts/chip.js"></script>

  <script src="/scripts/ad_search.js"></script>
  <script src="/scripts/Fab.js"></script>
  <script src="/scripts/Notification.js"></script>
  <script src="/scripts/searchFunction.js"></script>
  <script src="/scripts/context_menu.js"></script>
  <script src="\scripts\isonline.js"></script>

  <script>

    const cardsContainer = document.getElementById("cards");
    const sentinelA = document.getElementById("sentinelLoader");

    let currentPage = 1;

    const observerA = new IntersectionObserver(async (entries) => {
      for (let entry of entries) {
        if (entry.isIntersecting) {
          currentPage++;
          const res = await fetch(`/card/json?page=${currentPage}`);
          if (res.ok) {
            const html = await res.text();
            if (html.trim()) {
              cardsContainer.insertAdjacentHTML("beforeend", html);
            } else {
              sentinelA.innerHTML = `<p style="color:red">No more cards...</p>`
              observerA.unobserve(sentinelA);
            }
          }
        }
      }
    }, {
      threshold: 0
    });

    observerA.observe(sentinelA);

  </script>

  <script src="/scripts/header.js"></script>


  <script>
  </script>

  <script>
    const containera = document.querySelector("#cards");
    containera.addEventListener("change", () => {
      updateSelectedCards();
    });

    const onDocumentChange = (mutationsList, observer) => {
      for (const mutation of mutationsList) {
        if (mutation.type === 'childList') {
        } else if (mutation.type === 'attributes') {
        }
      }
    };

    const config = {
      attributes: true,
      childList: true,
      subtree: true
    };

    const observers = new MutationObserver(onDocumentChange);

    if (containera) {
      observers.observe(containera, config);
    }
    let selectedCardsSet = new Set();




    function updateSelectedCards() {

      const selectedcards = document.querySelectorAll(".select-card");
      selectedcards.forEach(e => {
        const id = e.closest("[data-id]").dataset.id;
        if (e.checked) {
          selectedCardsSet.add(id);
        } else {
          selectedCardsSet.delete(id);
        }
      });
      let cardlen = document.querySelector(".cardLen");
      cardlen.textContent = [...selectedCardsSet].length
      if ([...selectedCardsSet].length > 0) {
        document.querySelector(".card-options").classList.remove("disabled");
      } else {
        document.querySelector(".card-options").classList.add("disabled");
      }
    }
    updateSelectedCards();


    function selectAllButton() {
      const selectedcards = document.querySelectorAll(".select-card");
      const shouldSelect = !Array.from(selectedcards).every(cb => cb.checked);

      selectedcards.forEach(cb => cb.checked = shouldSelect);
      updateSelectedCards();
    }

    async function deleteCards() {
      if (selectedCardsSet.size > 0) {
        try {
          const res = await fetch("/card/delete", {
            method: "POST",
            headers: {
              "Content-Type": "application/json"
            },
            body: JSON.stringify({
              selected: [...selectedCardsSet]
            })
          });
          if (res.ok) {
            location.reload();
          }
        } catch (error) {
          console.error("Error deleting cards:", error);
          showToast("🚨 Unexpected error. Please check your connection.", "error");
        }
      } else {
        showToast("⚠️ Please select cards before deleting.", "error");
      }
    }

    async function downloadCard() {
      try {
        if (selectedCardsSet.size > 1) {
          const res = await fetch("/card/download", {
            method: "POST",
            headers: {
              "Content-Type": "application/json"
            },
            body: JSON.stringify({
              selected: [...selectedCardsSet]
            })
          });
          if (res.ok) {
            let data = await res.json();
            const blob = new Blob([JSON.stringify({ ...data })], { type: "application/json" });
            const url = URL.createObjectURL(blob);
            const a = document.createElement("a");
            a.href = url;
            const date = new Date().toLocaleDateString();
            const time = new Date().toLocaleTimeString();
            a.download = `Snippets-${date}-${time}.json`;
            a.click();
            URL.revokeObjectURL(url);
          } else {
            console.error("Somthing went wrong...")
          }
        } else {
          showToast("⚠️ Please select minimum 2 cards before downloading.", "error");
        }
      } catch (error) {
        console.error(error.message);
      }
    }





  </script>



  <script>
    async function pinIt(btn, id) {
      try {
        let res = await fetch(`/card/pin/${id}`, {
          method: "put"
        });
        if (res.ok) {
          let svg = btn.querySelector("svg");
          svg.classList.toggle("active");
        } else {
          showToast("🚨 Unexpected error. Please check your connection.", "error");
        }
      } catch (error) {
        console.error("Error in pinIt:", error);
        showToast("🚨 Unexpected error. Please check your connection.", "error");
      }
    }

    async function favIt(btn, id) {
      try {
        let res = await fetch(`/card/fav/${id}`, {
          method: "put"
        });
        if (res.ok) {
          let svg = btn.querySelector("svg");
          svg.classList.toggle("active");
        } else {
          showToast("🚨 Unexpected error. Please check your connection.", "error");
        }
      } catch (error) {
        console.error("Error in pinIt:", error);
        showToast("🚨 Unexpected error. Please check your connection.", "error");
      }
    }

    function shareCard(id) {
      window.navigator.clipboard.writeText(window.location.origin + `/card/${id}`);
      showToast("Link Copied to clipboard", "success");
    }
    async function editCard(id) {
      window.location.assign(`/card/${id}`);
    }

  </script>
  <script>
    window.onload = () => {
      let loader = document.querySelector(".loader");
      loader.style.display = "none";
    }
  </script>
</body>

</html>