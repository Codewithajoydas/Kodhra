<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Folders | Code Snippet Manager</title>
  <link rel="stylesheet" href="/style/css/partials/Header.css">
  <link rel="stylesheet" href="/style/css/ad_search.css">
  <link rel="stylesheet" href="/style/css/Notification.css">
  <link rel="stylesheet" href="/style/css/index.css">
  <link rel="stylesheet" href="/style/css/chip.css">
  <link rel="stylesheet" href="/style/css/card.css">
  <link rel="stylesheet" href="/style/css/toast.css">
  <link rel="stylesheet" href="/style/css/folder.css">
  <link rel="stylesheet" href="/style/css/toast.css">

  <script src="/socket.io/socket.io.js"></script>
  <!-- External CDN for image color -->
  <script src="https://unpkg.com/colorthief/dist/color-thief.umd.js"></script>
  <script src="https://unpkg.com/@lottiefiles/dotlottie-wc@0.6.2/dist/dotlottie-wc.js" type="module"></script>
  <link rel="preload" href="/gEzG0w1WVY.lottie" as="fetch" crossorigin="anonymous" />
  <style>
    .loader {
      display: flex;
      justify-content: center;
      align-items: center;
      height: 100vh;
      width: 100%;
      position: fixed;
      background: white;
      z-index: 100000;
      top: 0;
      font-size: clamp(30px, 3vw, 40px);

      font-weight: bolder;
    }

    .spain {
      width: 0.5em;
      height: 0.5em;
      background: #000000;
      border-radius: 50%;
      margin: 5px;
      animation: spin 0.6s ease-in-out infinite;
    }

    .spain:nth-child(1) {
      animation-delay: 0.1s;
    }

    .spain:nth-child(2) {
      animation-delay: 0.2s;
    }

    .spain:nth-child(3) {
      animation-delay: 0.3s;
    }

    @keyframes spin {
      0% {
        transform: translateY(0);
      }

      50% {
        transform: translateY(-10px);
      }

      100% {
        transform: translateY(0);
      }
    }
  </style>

</head>

<body data-theme="light">
  <div class="loader">
    <dotlottie-wc src="gEzG0w1WVY.lottie" style="width: 400px; height: 400px" speed="1" autoplay loop></dotlottie-wc>
  </div>

  <div class="content">
    <%- include("partials/header.ejs")%>
      <div class="container">
        <%- include("partials/sidebar.ejs", {navigation: 'folder' })%>
          <main>
            <div class="page_title">
              Total Folders
            </div>
            <div class="foldersDiv">
              <% folders.forEach((folder, i)=> { %>
                <div class="folder" data-name="<%= folder.folderName %>" data-id="<%= folder._id %>"
                  data-createat="<%= folder.createdAt %>" data-updateat="<%= folder.updatedAt %>"
                  data-menus="delete, rename, move, share" data-userId="<%= userId %>" data-mtype="folder"
                  data-cardname="<%= folder.folderName %>" data-contextMenu="true" data-url="/folder/<%= folder._id %>"
                  ondblclick="window.open('/folder/<%= folder._id %>', '_blank')" data-items="<%= folder.cards.length %>"
                  tabindex="0">
                  <div class="folder_icon">
                    <img src="<%= folder.cards.length> 1 ? '/assets/fillFolder.png' : '/assets/blankFolder.png' %>" alt=""
                      width="200px">
                  </div>
                  <div class="folder_name"
                    style="display: flex;flex-direction: column;justify-content: center;align-items: center;">
                    <%= folder.folderName %>
                      </>
                      <span style="font-size: small; color: gray">
                        Item Count <%= folder.cards.length %>
                      </span>
                  </div>
                  </div>
                <%})%>
                  </div>
            <div class="folder_info details-pane" aria-label="Folder details"
              style="width: 320px; padding: 16px; box-shadow: 0 0 0 1px rgba(0,0,0,0.04); background: var(--accent, #fff);">
              <div class="pane-header"
                style="display:flex;align-items:center;justify-content:space-between;gap:12px;margin-bottom:12px;">
                <div style="display:flex;align-items:center;gap:10px;">
                  <div class="folder_icon" style="width:48px;height:48px;flex:0 0 48px;">
                    <img src="/assets/fillFolder.png" alt="" width="48" height="48" style="display:block;">
                  </div>
                  <div>
                    <div class="folder_title" style="font-weight:700;line-height:1;" title="Folder Name">
                      <span id="details-name">Folder Name</span>
                    </div>
                    <div style="font-size:12px;color:gray;margin-top:4px;" id="details-location">/path/to/folder</div>
                    </div>
                </div>
                </div>
                <section class="pane-body" style="gap:14px;">
                  <div class="preview" style="display:flex;flex-direction:column;align-items:center;margin-bottom: 15px;">
                    <img id="details-thumb" src="/assets/fillFolder.png" alt="Folder preview" width="80" height="80">
                    <small style="color:gray;text-align:center;" id="details-items">0 items • 0 KB</small>
                  </div>
                  <div class="meta" style="flex:1;">
                    <dl style="display:grid;grid-template-columns:110px 1fr;row-gap:8px;column-gap:12px;font-size:13px;color:#111;">
                      <dt style="color:gray;font-weight:600;">Type</dt>
                      <dd id="details-type" style="margin:0">Folder</dd>
                      <dt style="color:gray;font-weight:600;">Location</dt>
                      <dd id="details-path" style="margin:0;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;">
                        /path/to/folder</dd>
                      <dt style="color:gray;font-weight:600;">Items</dt>
                      <dd id="details-count" style="margin:0">0</dd>
                      <dt style="color:gray;font-weight:600;">Size</dt>
                      <dd id="details-size" style="margin:0">0 KB</dd>
                      <dt style="color:gray;font-weight:600;">Created</dt>
                      <dd id="details-created" style="margin:0">—</dd>
                      <dt style="color:gray;font-weight:600;">Modified</dt>
                      <dd id="details-modified" style="margin:0">—</dd>
                    </dl>
                  </div>
                </section>

              <footer
                style="margin-top:12px;border-top:1px solid rgba(0,0,0,0.04);padding-top:10px;display:flex;gap:8px;align-items:center;">
                <small style="color:gray;">Quick actions:</small>
                <button class="btn" onclick="newFileInFolder()" style="padding:6px 8px;" disabled>New File</button>
                <button class="btn" onclick="addTag()" style="padding:6px 8px;" disabled>Add Tag</button>
              </footer>
              </div>

            <!-- <%- include("partials/fab.ejs")%> -->
              </main>
              <div id="context_menu" style="
                                position: absolute;
                                top: 0;
                                left: 0;
                                display: none;
                                z-index: 1000000;
                                width: 200px;
                              ">
                <ul id="context_menu_list"></ul>
              </div>

          <div class="move_folder">
            <div class="header_title" style="font-weight: bolder">
              <div class="span">Move " folderName"</div>
            </div>
            <hr />
            <div class="folders_name">
              <ul>
                <% if (folders.length===0) { %>
                  <span style="margin: 10px; color: red">No folder found</span>
                  <% } %>
                    <% folders.forEach((folder, i)=> { %>
                      <li>
                        <label>
                          <input type="radio" name="moveFolder" value="<%= folder._id %>" id="moveFolder<%= i %>" />
                          <div class="folder">
                            <div class="folder_icon">
                              <!-- SVG folder icon -->
                            </div>
                            <div class="folder_name" style="
                                                        display: flex;
                                                        justify-content: center;
                                                        align-items: center;
                                                        gap: 10px;
                                                      ">
                              <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="#EDCE44" stroke="none"
                                stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-folder-icon lucide-folder">
                                <path
                                  d="m6 14 1.5-2.9A2 2 0 0 1 9.24 10H20a2 2 0 0 1 1.94 2.5l-1.54 6a2 2 0 0 1-1.95 1.5H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h3.9a2 2 0 0 1 1.69.9l.81 1.2a2 2 0 0 0 1.67.9H18a2 2 0 0 1 2 2v2" />
                              </svg>
                              <span style="
                                                                display: block;
                                                                width: 120px;
                                                                white-space: nowrap;
                                                                overflow: hidden;
                                                                text-overflow: ellipsis;
                                                              " title="<%= folder.folderName %>">
                                <%= folder.folderName %>
                              </span>
                              </div>
                          </div>
                        </label>
                        </li>
                        <% }) %>
                          </ul>
                          <button class="move_btn" onclick="moveIt()" <%=folders.length===0 ? "disabled" : "" %> > Move </button>
                          </div>
                          </div>
                          <div class="toast" data-type="success">
                            <div class="toast-content">
                              <span class="toast-message"> </span>
                              <div class="close">
                                <svg xmlns="http://www.w3.org/2000/svg" width="15" height="15" viewBox="0 0 24 24" fill="none"
                  stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
                  class="lucide lucide-octagon-x-icon lucide-octagon-x">
                  <path d="m15 9-6 6" />
                  <path
                    d="M2.586 16.726A2 2 0 0 1 2 15.312V8.688a2 2 0 0 1 .586-1.414l4.688-4.688A2 2 0 0 1 8.688 2h6.624a2 2 0 0 1 1.414.586l4.688 4.688A2 2 0 0 1 22 8.688v6.624a2 2 0 0 1-.586 1.414l-4.688 4.688a2 2 0 0 1-1.414.586H8.688a2 2 0 0 1-1.414-.586z" />
                  <path d="m9 9 6 6" />
                </svg>
              </div>
            </div>
          </div>

          <div class="notification-bar">
            <h3>Notifications</h3>
            <ul class="notification-lists">
            </ul>
          </div>

          <div class="advanced-search">
            <h3>Advanced Search</h3>
            <div class="feildList">
              <label for="title">
                <span>Title:</span>
                <input type="text" name="title" id="title" placeholder="Title" />
              </label>
              <label for="code"><span>Code:</span> <input type="text" name="code" id="code" placeholder="Code"></label>
              <label for="description">
                <span>Description:</span>
                <textarea type="text" name="description" id="description" placeholder="Description" rows="5"></textarea>
              </label>
              <label for="language">
                <span>Language:</span>
                <input type="text" name="language" id="language" placeholder="Language" list="languages" />
                <datalist id="languages">
                  <option value="JavaScript">JavaScript</option>
                  <option value="CSS">CSS</option>
                  <option value="HTML">HTML</option>
                  <option value="C">C</option>
                  <option value="C++">C++</option>
                  <option value="C#">C#</option>
                  <option value="Java">Java</option>
                  <option value="TypeScript">TypeScript</option>
                  <option value="Python">Python</option>
                  <option value="Ruby">Ruby</option>
                  <option value="PHP">PHP</option>
                  <option value="Go">Go</option>
                  <option value="Rust">Rust</option>
                  <option value="Swift">Swift</option>
                  <option value="Kotlin">Kotlin</option>
                  <option value="Objective-C">Objective-C</option>
                  <option value="Scala">Scala</option>
                  <option value="Perl">Perl</option>
                  <option value="R">R</option>
                  <option value="Dart">Dart</option>
                  <option value="Haskell">Haskell</option>
                  <option value="Lua">Lua</option>
                  <option value="Elixir">Elixir</option>
                  <option value="Clojure">Clojure</option>
                  <option value="Shell">Shell (Bash)</option>
                  <option value="PowerShell">PowerShell</option>
                  <option value="SQL">SQL</option>
                  <option value="GraphQL">GraphQL</option>
                  <option value="MATLAB">MATLAB</option>
                  <option value="Assembly">Assembly</option>
                  <option value="Fortran">Fortran</option>
                  <option value="COBOL">COBOL</option>
                  <option value="Erlang">Erlang</option>
                  <option value="VB.NET">VB.NET</option>
                </datalist>
              </label>
              <label for="folder">
                <span>Folder:</span>
                <input type="text" name="folder" id="folder" placeholder="Folder" />
              </label>
              <label for="date">
                <span>Date:</span>
                <input type="date" name="date" id="date" placeholder="Date" />
              </label>
            </div>
            <button id="searchBtn" onclick="advance_search()">Search</button>

          </div>
<div class="networkInfo" style="display: none;">
  <span><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none"
      stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
      class="lucide lucide-info-icon lucide-info">
      <circle cx="12" cy="12" r="10" />
      <path d="M12 16v-4" />
      <path d="M12 8h.01" />
    </svg></span>

  <span id="networkInfo"></span>
          </div>
      </div>
  </div>

<!-- Page Loader Animation -->
  <script>
      window.onload = () => {
        document.querySelector(".loader").style.display = "none";
      };
  </script>
  <!-- Page Loader Animation End -->
  <script src="\scripts\ad_search.js"></script>
  <script src="\scripts\searchFunction.js"></script>
  <script src="\scripts\notification.js"></script>
  <script src="\scripts\fab.js"></script>
  <script src="\scripts\header.js"></script>
  <script src="\scripts\isonline.js"></script>
  <script src="\scripts\context_menu.js"></script>
  <script>

  const folders = document.querySelectorAll('.folder');

      folders.forEach((folder, index) => {
        folder.addEventListener('keydown', (e) => {
          if (e.key === 'ArrowRight') {
            const next = folders[index + 1];
            if (next) {
              next.focus();
              next.scrollIntoView({ behavior: 'smooth', inline: 'center' });
            }
        }
        if (e.key === 'ArrowLeft') {
          const prev = folders[index - 1];
          if (prev) {
            prev.focus();
            prev.scrollIntoView({ behavior: 'smooth', inline: 'center' });
          }
        }
      });
    });
    </script>
  <script>
    const folder = document.querySelectorAll('.folder');
    const folder_info = document.querySelector(".folder_info");
    folder_info.style.display = "none";
    folder.forEach(ele => {
      ele.addEventListener('keydown', (e) => {
        if (e.key === 'Enter') {
          ele.click();
        }
      });
      ele.addEventListener('click', async (event) => {
        event.stopPropagation();
        let folderName = ele.getAttribute('data-name');
        let folderId = ele.getAttribute('data-id');
        let folderSize = ele.getAttribute('data-items');
        let folderUrl = ele.getAttribute('data-url');
        let createAt = ele.getAttribute('data-crateat');
        let updateAt = ele.getAttribute('data-updateat');
        let size = await getFolderSize(folderUrl);
        const units = ['B', 'KB', 'MB', 'GB', 'TB'];
        if (size === 0) return '0 B';
        const i = Math.floor(Math.log(size) / Math.log(1024));
        let finalSize = (size / Math.pow(1024, i)).toFixed(2) + ' ' + units[i];
        const details_size = document.getElementById("details-size");
        details_size.textContent = finalSize;
        let details_name = document.getElementById("details-name");
        let details_path = document.getElementById("details-path");
        let details_items = document.getElementById("details-items");
        let details_count = document.getElementById("details-count");
        let details_location = document.getElementById("details-location");
        let details_created = document.getElementById("details-created");
        let details_modified = document.getElementById("details-modified");
        details_created.textContent = new Date(createAt).toLocaleString();
        details_modified.textContent = new Date(updateAt).toLocaleString();
        details_items.textContent = `${folderSize} • ${finalSize}`;
        details_count.textContent = folderSize;
        details_name.textContent = folderName;
        details_path.textContent = `/folder/${folderId}`;
        details_location.textContent = folderUrl;
        folder_info.style.display = "block";
      })
    })

      document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape') {
          folder_info.style.display = "none";
        }
    });
      document.addEventListener('click', (e) => {
        if (!folder_info.contains(e.target)) {
          folder_info.style.display = "none";
        }
    });

      async function getFolderSize(url) {
        const res = await fetch(url, {
          method: "HEAD",
          credentials: "include",
        });
      const size = res.headers.get("Content-Length");
      return size;
    }

</script>


  <script>
    let context_menu = document.getElementById("context_menu");
    let menuListEl = document.getElementById("context_menu_list");

    document.querySelectorAll(".menu_top").forEach((card) => {
      card.addEventListener("click", (e) => {
        e.stopPropagation();
        const icons = {
          delete: `<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-trash-icon lucide-trash"><path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6"/><path d="M3 6h18"/><path d="M8 6V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"/></svg>`,
          edit: `<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-folder-pen-icon lucide-folder-pen"><path d="M2 11.5V5a2 2 0 0 1 2-2h3.9c.7 0 1.3.3 1.7.9l.8 1.2c.4.6 1 .9 1.7.9H20a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2h-9.5"/><path d="M11.378 13.626a1 1 0 1 0-3.004-3.004l-5.01 5.012a2 2 0 0 0-.506.854l-.837 2.87a.5.5 0 0 0 .62.62l2.87-.837a2 2 0 0 0 .854-.506z"/></svg>`,
          move: `<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-move-icon lucide-move"><path d="M12 2v20"/><path d="m15 19-3 3-3-3"/><path d="m19 9 3 3-3 3"/><path d="M2 12h20"/><path d="m5 9-3 3 3 3"/><path d="m9 5 3-3 3 3"/></svg>`,
          share: `<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-external-link-icon lucide-external-link"><path d="M15 3h6v6"/><path d="M10 14 21 3"/><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6"/></svg>`,
          pin: `<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-pin-icon lucide-pin"><path d="M12 17v5"/><path d="M9 10.76a2 2 0 0 1-1.11 1.79l-1.78.9A2 2 0 0 0 5 15.24V16a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1v-.76a2 2 0 0 0-1.11-1.79l-1.78-.9A2 2 0 0 1 15 10.76V7a1 1 0 0 1 1-1 2 2 0 0 0 0-4H8a2 2 0 0 0 0 4 1 1 0 0 1 1 1z"/></svg>`,
        };

        let { id, menuId, menus, userid, cardname, mtype } =
          e.currentTarget.dataset;

        const actions = {
          edit: () => editCard(id),
          share: () => shareCard(userid, id),
          pin: () => pinIt(id),
          move: () => moveCard(id, cardname, mtype),
          fav: () => favIt(id),
          delete: () => deleteCard(id),
        };
        let menuItems = menus.split(",").map((i) => i.trim());
        context_menu.style.display = "block";
        context_menu.style.visibility = "hidden";
        context_menu.style.left = "0px";
        context_menu.style.top = "0px";

        let menuWidth = context_menu.offsetWidth;
        let menuHeight = context_menu.offsetHeight;

        let x = e.clientX;
        let y = e.clientY;

        if (x + menuWidth > window.innerWidth)
          x = window.innerWidth - menuWidth - 10;
        if (y + menuHeight > window.innerHeight)
          y = window.innerHeight - menuHeight - 10;

        document.querySelector("body").classList.add("active");
        context_menu.style.left = x + "px";
        context_menu.style.top = y + "px";
        context_menu.style.visibility = "visible";
        context_menu.style.display = "block";

        menuListEl.innerHTML = "";

        menuItems.forEach((item) => {
          let li = document.createElement("li");
          li.innerHTML = `${icons[item]} ${item}`;
          menuListEl.appendChild(li);
          if (actions[item]) {
            li.addEventListener("click", (ev) => {
              ev.stopPropagation();
              actions[item]();
              context_menu.style.display = "none";
            });
          }
        });
      });
    });

    let move_folder = document.querySelector(".move_folder");
    let getFoldername = document.querySelector(".header_title .span");
    let folderId;
    let cardId;
    let movetype;
      let foldera = document
      .querySelectorAll("input[name='moveFolder']")
      .forEach((fl) => {
        fl.addEventListener("change", (e) => {
          folderId = e.target.value;
        });
      });

    async function moveCard(id, cardName, mtype) {
      cardId = id;
      movetype = mtype;
      getFoldername.textContent = `Move \"${cardName}\" :`;
      move_folder.style.display = "block";
      move_folder.style.visibility = "visible";
    }

    const toast = document.querySelector(".toast");
    const toastCloseBtn = document.querySelector(".toast .close");
    const toastMessage = document.querySelector(".toast-message");

    let toastTimeoutId = null;

    function showToast(message, type = "success", duration = 5000) {
      if (toastTimeoutId) clearTimeout(toastTimeoutId);
      toastMessage.textContent = message;
      toast.dataset.type = type;
      toast.style.display = "block";
      toastTimeoutId = setTimeout(() => {
        toast.style.display = "none";
        toastTimeoutId = null;
      }, duration);
    }
    toastCloseBtn.addEventListener("click", () => {
      toast.style.display = "none";
      if (toastTimeoutId) {
        clearTimeout(toastTimeoutId);
        toastTimeoutId = null;
      }
    });

    async function moveIt() {
      const selected = document.querySelector(
        "input[name='moveFolder']:checked"
      );
      if (!selected) {
        showToast("⚠️ Please select a folder before moving.", "error");
        return;
      }

      const folderId = selected.value;

      try {
        const res = await fetch(`moveit/${movetype}/${folderId}/${cardId}`, {
          method: "PUT",
          headers: { "Content-Type": "application/json" },
          credentials: "include",
        });

        if (!res.ok) {
          let errorMsg = "Move failed. Please try again.";
          try {
            const data = await res.json();
            if (data?.error) errorMsg = data.error;
          } catch { }
          showToast(`🚨 ${errorMsg}`, "error");
        } else {
          showToast(`🎉 Successfully moved ${movetype}!`, "success");
        }
      } catch (err) {
        console.error("Error in moveIt:", err);
        showToast(
          "🚨 Unexpected error. Please check your connection.",
          "error"
        );
      }
    }

    document.addEventListener("click", () => {
      document.querySelector("body").classList.remove("active");
      move_folder.style.display = "none";
      context_menu.style.display = "none";
      move_folder.querySelectorAll("input").forEach((inp) => {
        if (inp.type === "radio" || inp.type === "checkbox") {
          inp.checked = false;
          folderId = null;
        } else {
          inp.value = "";
        }
      });
    });
    move_folder.addEventListener("click", (e) => {
      e.stopPropagation();
    });
</script>
</body>

</html>