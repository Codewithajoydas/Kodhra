<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Import-export | Code Snippet Manager</title>
  <link rel="stylesheet" href="/style/css/partials/Header.css">
  <link rel="stylesheet" href="/style/css/ad_search.css">
  <link rel="stylesheet" href="/style/css/Notification.css">
  <link rel="stylesheet" href="/style/css/index.css">
  <link rel="stylesheet" href="/style/css/chip.css">
  <link rel="stylesheet" href="/style/css/card.css">
  <link rel="stylesheet" href="/style/css/toast.css">
  <link rel="stylesheet" href="/style/css/import_export.css">

  <style>
    .loader {
      display: flex;
      justify-content: center;
      align-items: center;
      height: 100vh;
      width: 100%;
      position: fixed;
      background: white;
      z-index: 100000;
      top: 0;
      font-size: clamp(30px, 3vw, 40px);

      font-weight: bolder;
    }

    .spain {
      width: 0.5em;
      height: 0.5em;
      background: #000000;
      border-radius: 50%;
      margin: 5px;
      animation: spin 0.6s ease-in-out infinite;
    }

    .spain:nth-child(1) {
      animation-delay: 0.1s;
    }

    .spain:nth-child(2) {
      animation-delay: 0.2s;
    }

    .spain:nth-child(3) {
      animation-delay: 0.3s;
    }

    @keyframes spin {
      0% {
        transform: translateY(0);
      }

      50% {
        transform: translateY(-10px);
      }

      100% {
        transform: translateY(0);
      }
    }
  </style>
</head>

<body data-theme="light">
  <div class="loader">
    <div style="display: flex; justify-content: center; align-items: end">
      Loading
      <div class="spain"></div>
      <div class="spain"></div>
      <div class="spain"></div>
    </div>
  </div>
  <div class="content">
    <%- include("partials/header.ejs")%>
    <div class="container">
     <%- include("partials/sidebar.ejs", {navigation: 'import-export' }) %>
      <main data-barba="container" data-barba-namespace="import-export">
        <div class="import">
          <div class="upload">
            <label for="fileInput">Click Here To Select File</label>
            <input type="file" id="fileInput" hidden accept=".json"/>
            <button id="uploadBtn">Upload File</button>
            <p style="font-size: smaller">
              Please upload a json file with the following structure:
            </p>
            <pre style="font-size: smaller">
{"name": "card name", "description": "card description", "tags": ["tag1", "tag2"], "snippet": "code snippet"}</pre>
            <a href="template.json" download>Download Template</a>
          </div>
        </div>
      </main>
    </div>
  </div>
  <script src="/scripts/home.js"></script>
  <script>
    let results = document.getElementById("results");
    let list = document.getElementById("results-list");
    let searchInput = document.querySelector(".searchResult");

    let debounceTimer;

    searchInput.addEventListener("input", function (e) {
      e.stopPropagation();
      let query = e.target.value.trim();
      clearTimeout(debounceTimer);
      if (!query) {
        results.classList.remove("active");
        return;
      }
      debounceTimer = setTimeout(async () => {
        results.classList.add("active");
        try {
          let rs = await fetch(`/search?query=${encodeURIComponent(query)}`);
          let data = await rs.json();
          let unique = new Set();
          data.findCards.slice(0, 3).forEach((item) => {
            if (!unique.has(item.title)) {
              unique.add(item.title);
              let a = document.createElement("a");
              a.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-search-icon lucide-search"><path d="m21 21-4.34-4.34"/><circle cx="11" cy="11" r="8"/></svg> ${item.title}`;
              a.href = `/card/${item._id}`;
              a.target = "_blank";
              list.innerHTML = "";
              list.appendChild(a);
            }
          });
          if (list.children.length === 0) {
            let li = document.createElement("li");
            li.textContent = "No results found";
            list.appendChild(li);
          }
        } catch (err) {
          console.error("Search error:", err);
        }
      }, 300);
    });

    function setActiveStyle(element, active) {
      if (active) {
        element.style.fill = "black";
        element.style.transition = "0.3s ease";
      } else {
        element.style.fill = "none";
      }
    }
    async function pinIt(id) {
      const pinIcon = document.querySelector(`.pin[data-id="${id}"] svg`);
      try {
        const res = await fetch(`/card/pin/${id}`, {
          method: "PUT",
        });
        const data = await res.json();

        if (data.success) {
          setActiveStyle(pinIcon, data.card.isPinned);
        }
      } catch (err) {
        console.error("Error pinning:", err);
      }
    }
    async function favIt(id) {
      const favIcon = document.querySelector(`.fav[data-id="${id}"] svg`);
      try {
        const res = await fetch(`/card/fav/${id}`, {
          method: "PUT",
        });
        const data = await res.json();

        if (data.success) {
          setActiveStyle(favIcon, data.card.isFavorite);
        }
      } catch (err) {
        console.error("Error favoriting:", err);
      }
    }
    function toggleMenu(id) {
      document.querySelectorAll(".menu-popup").forEach((m) => {
        if (m.id !== "menu-" + id) m.classList.remove("active");
      });

      let menu = document.getElementById("menu-" + id);
      menu.classList.toggle("active");
    }

    async function deleteCard(id) {
      try {
        const res = await fetch(`/card/${id}`, {
          method: "DELETE",
          credentials: "include",
        });

        if (res.ok) {
          const cardEl = document.getElementById(`card-${id}`);
          if (cardEl) {
            cardEl.remove();
          }
          window.location.reload();
        } else {
          console.error("Failed to delete card:", await res.text());
        }
      } catch (err) {
        console.error("Delete error:", err);
      }
    }

    function editCard(id) {
      window.location.assign(`/card/${id}`);
    }

    let search = document.getElementById("search");
    search.addEventListener("keydown", function (e) {
      if (e.key === "Enter") {
        let query = search.value;
        if (query.trim() !== "") {
          window.location.href = `/search?query=${encodeURIComponent(query)}`;
        }
      }
    });
    document.addEventListener("keydown", function (e) {
      if (e.ctrlKey && e.key === "k") {
        e.preventDefault();
        search.focus();
      }
    });

    document.getElementById("uploadBtn").addEventListener("click", () => {
      const file = document.getElementById("fileInput").files[0];
      if (!file) return alert("Please select a file!");

      const formData = new FormData();
      formData.append("file", file);

      fetch("/import-export", {
        method: "POST",
        body: formData,
      })
        .then((res) => res.json())
        .then((data) => console.log(data))
        .catch((err) => console.error(err));
    });
  </script>
  <script>
    window.onload = () => {
      let loader = document.querySelector(".loader");
      loader.style.display = "none";
    };
  </script>
  <script src="\scripts\shortcut.js"></script>
  <script src="\scripts\index.js"></script>

</body>

</html>